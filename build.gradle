plugins {
    id 'java'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'jacoco'
}

group 'br.com.renata'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sonarqube {
    properties {
        property "sonar.projectKey", "renatabrasil_ninja-fabric-sale"
        property "sonar.organization", "renatabrasil"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
    }
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    test {
        useJUnitPlatform()
    }

    jacocoTestCoverageVerification.dependsOn jacocoTestReport

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
        testImplementation "org.mockito:mockito-core:3.12.4"
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    }

    sonarqube {

        properties {
            property "sonar.sources", "src/main"
            property "sonar.tests", "src/test"
            property 'sonar.java.coveragePlugin', "jacoco"
            property "sonar.junit.reportsPaths", "$buildDir/test-results/"
            property "sonar.coverage.jacoco.xmlReportPaths", "build/coverage-reports/coverage.xml"
        }
    }

    task codeCoverageReport(type: JacocoReport) {

        // Gather execution data from all subprojects
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        // Add all relevant sourcesets from the subprojects
        subprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            html.enabled true
            csv.enabled false
        }
    }

// always run the tests before generating the report
    codeCoverageReport.dependsOn {
        subprojects*.test
    }

    jacocoTestReport {
        enabled true
        dependsOn(test)
        reports {
            xml.enabled (true)
            html.enabled (true)
            xml.destination file("${buildDir}/coverage-reports/coverage.xml")
            html.destination file("${buildDir}/coverage-reports/coverage.html")
        }
    }
}



